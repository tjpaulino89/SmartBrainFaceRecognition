{"ast":null,"code":"var _jsxFileName = \"/Users/thomaspaulino/Desktop/ztm/projects/SmartBrainFaceRecognition/SmartBrain/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport SignIn from './components/SignIn/SignIn';\nimport Register from './components/Register/Register';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport ParticlesBg from 'particles-bg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  boundingBoxes: [],\n  route: 'signin',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    joined: ''\n  }\n};\nclass App extends Component {\n  constructor() {\n    super();\n    // componentDidMount() {\n    //   fetch('http://localhost:3000/')\n    //   .then(response => response.json())\n    //   .then(console.log)\n    // }\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n        }\n      });\n    };\n    this.calculateFaceLocation = result => {\n      console.log(\"RESULT\", result);\n      const regionsArray = result.outputs[0].data.regions;\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      const boxDataArray = regionsArray.map(item => {\n        const dimensionsObj = item.region_info.bounding_box;\n        return {\n          leftCol: dimensionsObj.left_col * width,\n          topRow: dimensionsObj.top_row * height,\n          rightCol: width - dimensionsObj.right_col * width,\n          bottomRow: height - dimensionsObj.bottom_row * height\n        };\n      });\n      return boxDataArray;\n    };\n    this.displayFaceDetectionBox = box => {\n      this.setState({\n        boundingBoxes: box\n      });\n    };\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.onPictureSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      ///////////////////////////////////////////////////////////////////////////////////////////////////\n      // In this section, we set the user authentication, user and app ID, model details, and the URL\n      // of the image we want as an input. Change these strings to run your own example.\n      //////////////////////////////////////////////////////////////////////////////////////////////////\n\n      // Your PAT (Personal Access Token) can be found in the portal under Authentification\n      // const PAT = 'ffe67f6f20cd4de5aef921dfd72cc5fa';\n      // // Specify the correct user_id/app_id pairings\n      // // Since you're making inferences outside your app's scope\n      // const USER_ID = 'tjpaulino89';       \n      // const APP_ID = 'Face-Detection';\n      // // Change these to whatever model and image URL you want to use\n      // const MODEL_ID = 'face-detection';\n      // const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';    \n      // const IMAGE_URL = this.state.input;\n      // // 'https://samples.clarifai.com/metro-north.jpg';\n\n      // ///////////////////////////////////////////////////////////////////////////////////\n      // // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n      // ///////////////////////////////////////////////////////////////////////////////////\n\n      // const raw = JSON.stringify({\n      //     \"user_app_id\": {\n      //         \"user_id\": USER_ID,\n      //         \"app_id\": APP_ID\n      //     },\n      //     \"inputs\": [\n      //         {\n      //             \"data\": {\n      //                 \"image\": {\n      //                     \"url\": IMAGE_URL\n      //                 }\n      //             }\n      //         }\n      //     ]\n      // });\n\n      // const requestOptions = {\n      //     method: 'POST',\n      //     headers: {\n      //         'Accept': 'application/json',\n      //         'Authorization': 'Key ' + PAT\n      //     },\n      //     body: raw\n      // };\n\n      // // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n      // // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n      // // this will default to the latest version_id\n\n      // fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n      //     .then(response => response.json())\n\n      fetch('https://smartbrainbackend.onrender.com/imageurl', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          input: this.state.input\n        })\n      }).then(response => response.json()).then(result => {\n        console.log('result', result);\n        if (result) {\n          fetch('https://smartbrainbackend.onrender.com/image', {\n            method: 'put',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n          }).catch(console.log);\n        }\n        this.displayFaceDetectionBox(this.calculateFaceLocation(result));\n      }).catch(error => console.log('error', error));\n    };\n    this.onRouteChange = route => {\n      if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      } else {\n        this.setState(initialState);\n      }\n      this.setState({\n        route: route\n      });\n    };\n    this.state = initialState;\n  }\n  render() {\n    const {\n      isSignedIn,\n      imageUrl,\n      boundingBoxes,\n      route\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"particles-js\",\n        children: /*#__PURE__*/_jsxDEV(ParticlesBg, {\n          color: \"#d9ecff\",\n          num: 200,\n          type: \"cobweb\",\n          bg: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n        onRouteChange: this.onRouteChange,\n        isSignedIn: isSignedIn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), route === 'home' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          userName: this.state.user.name,\n          userEntries: this.state.user.entries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onPictureSubmit: this.onPictureSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          imageUrl: imageUrl,\n          boundingBoxes: boundingBoxes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }, this) : route === 'signin' ? /*#__PURE__*/_jsxDEV(SignIn, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Navigation","SignIn","Register","Logo","ImageLinkForm","Rank","FaceRecognition","ParticlesBg","jsxDEV","_jsxDEV","initialState","input","imageUrl","boundingBoxes","route","isSignedIn","user","id","name","email","entries","joined","App","constructor","loadUser","data","setState","calculateFaceLocation","result","console","log","regionsArray","outputs","regions","image","document","getElementById","width","Number","height","boxDataArray","map","item","dimensionsObj","region_info","bounding_box","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceDetectionBox","box","onInputChange","event","target","value","onPictureSubmit","state","fetch","method","headers","body","JSON","stringify","then","response","json","count","Object","assign","catch","error","onRouteChange","render","className","children","color","num","type","bg","fileName","_jsxFileName","lineNumber","columnNumber","userName","userEntries"],"sources":["/Users/thomaspaulino/Desktop/ztm/projects/SmartBrainFaceRecognition/SmartBrain/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport SignIn from './components/SignIn/SignIn';\nimport Register from './components/Register/Register';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition'\nimport ParticlesBg from 'particles-bg'\n\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  boundingBoxes: [],\n  route: 'signin',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    joined: ''\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialState;\n  }\n\n\n  // componentDidMount() {\n  //   fetch('http://localhost:3000/')\n  //   .then(response => response.json())\n  //   .then(console.log)\n  // }\n  \n  loadUser = (data) => {\n    this.setState({user: {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      entries: data.entries,\n      joined: data.joined\n    }})\n  }\n\n  calculateFaceLocation = (result) => {\n    console.log(\"RESULT\",result)\n    const regionsArray = result.outputs[0].data.regions;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n\n    const boxDataArray = regionsArray.map(item => {\n      const dimensionsObj = item.region_info.bounding_box;\n      return {\n        leftCol: dimensionsObj.left_col * width,\n        topRow: dimensionsObj.top_row * height,\n        rightCol: width - (dimensionsObj.right_col * width),\n        bottomRow: height - (dimensionsObj.bottom_row * height)\n      };\n    });\n    return boxDataArray;\n  }\n\n  displayFaceDetectionBox = (box) => {\n    this.setState({ boundingBoxes: box});\n  }\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value })\n  }\n\n  onPictureSubmit = () => {\n    this.setState({ imageUrl: this.state.input });\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\n    // In this section, we set the user authentication, user and app ID, model details, and the URL\n    // of the image we want as an input. Change these strings to run your own example.\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n\n    // Your PAT (Personal Access Token) can be found in the portal under Authentification\n    // const PAT = 'ffe67f6f20cd4de5aef921dfd72cc5fa';\n    // // Specify the correct user_id/app_id pairings\n    // // Since you're making inferences outside your app's scope\n    // const USER_ID = 'tjpaulino89';       \n    // const APP_ID = 'Face-Detection';\n    // // Change these to whatever model and image URL you want to use\n    // const MODEL_ID = 'face-detection';\n    // const MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';    \n    // const IMAGE_URL = this.state.input;\n    // // 'https://samples.clarifai.com/metro-north.jpg';\n\n    // ///////////////////////////////////////////////////////////////////////////////////\n    // // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    // ///////////////////////////////////////////////////////////////////////////////////\n\n    // const raw = JSON.stringify({\n    //     \"user_app_id\": {\n    //         \"user_id\": USER_ID,\n    //         \"app_id\": APP_ID\n    //     },\n    //     \"inputs\": [\n    //         {\n    //             \"data\": {\n    //                 \"image\": {\n    //                     \"url\": IMAGE_URL\n    //                 }\n    //             }\n    //         }\n    //     ]\n    // });\n\n    // const requestOptions = {\n    //     method: 'POST',\n    //     headers: {\n    //         'Accept': 'application/json',\n    //         'Authorization': 'Key ' + PAT\n    //     },\n    //     body: raw\n    // };\n\n    // // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // // this will default to the latest version_id\n\n    // fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n    //     .then(response => response.json())\n        \n    fetch('https://smartbrainbackend.onrender.com/imageurl', {\n      method: 'post',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n        input: this.state.input\n      })\n    })\n    .then(response => response.json())\n    .then(result => {\n      console.log('result', result)\n      if(result) {\n        fetch('https://smartbrainbackend.onrender.com/image', {\n          method: 'put',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n            id: this.state.user.id\n          })\n        })\n        .then(response => response.json())\n        .then(count => {\n            this.setState(Object.assign(this.state.user, {entries: count}))\n        })\n        .catch(console.log) \n      }\n      this.displayFaceDetectionBox(this.calculateFaceLocation(result))})\n    .catch(error => console.log('error', error));\n  }\n\n  onRouteChange = (route) => {\n    if (route === 'home'){\n      this.setState({isSignedIn: true});\n    } else {\n      this.setState(initialState);\n    }\n    this.setState({route: route});\n  }\n  \n  render() {\n    const { isSignedIn, imageUrl, boundingBoxes, route } = this.state;\n    return (\n      <div className=\"App\">\n        <div id='particles-js'>\n          <ParticlesBg color=\"#d9ecff\" num={200} type=\"cobweb\" bg={true} />\n        </div>\n        <Navigation onRouteChange={this.onRouteChange} isSignedIn={isSignedIn} />\n        {(route === 'home') \n          ? <div>\n              <Logo />\n              <Rank userName={this.state.user.name} userEntries={this.state.user.entries}/>\n              <ImageLinkForm onInputChange={this.onInputChange} onPictureSubmit={this.onPictureSubmit}/>\n              <FaceRecognition imageUrl={imageUrl} boundingBoxes={boundingBoxes}/>\n            </div>\n          : (route) === 'signin' \n            ? <SignIn loadUser={this.loadUser} onRouteChange={this.onRouteChange}/> \n            : <Register loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\n        }\n      </div>\n  );\n  }\n\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}